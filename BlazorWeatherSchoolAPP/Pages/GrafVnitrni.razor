@page "/grafvnitrni"
@layout MainLayout

@using DBConnect.Models
@inject WeatherDB dataDB

@inject IJSRuntime JS
@using BlazorWeatherSchoolAPP.Source;


<RadzenContentContainer Name="main">
    <RadzenCard Style="width: 100%; ">
        <ChildContent>
            <RadzenText TextAlign="TextAlign.Left" TextStyle="TextStyle.H4">Pohoda vnitřního prostředí</RadzenText>
            <p>
                Grafy zobrazují hodnoty maxim, minim a průměrů vnitřní pohody prostředí.
                V základním nastavení se zobrazují hodnoty v rámci jednoho týdne, ale rozsah výběru je
                možné upřesnit pomocí kalendáře.
            </p>
            <br />
            <RadzenRow>
                <RadzenColumn SizeXS="12" SizeSM="12" SizeMD="6" SizeLG="6" SizeXL="6" Style="width: 100%; overflow-x:auto ">
                    <div class=" rz-text-align-center">
                        <RadzenSelectBar @bind-Value=@Velicina class="rz-background-color-base-100 rz-border-black rz-border-radius-1" Size="ButtonSize.Small">
                            <Items>
                                <RadzenSelectBarItem Text="Teplota vzduchu" Value="1" />
                                <RadzenSelectBarItem Text="Tlak vzduchu" Value="2" />
                                <RadzenSelectBarItem Text="Vlhkost vzduchu" Value="3" />
                                <RadzenSelectBarItem Text="Prachové částice" Value="4" />
                            </Items>
                        </RadzenSelectBar>
                    </div>
                </RadzenColumn>
                <RadzenColumn>
                    <div class="rz-text-align-center">
                        <MudDateRangePicker Class="bordered-datepicker2" tabindex="1234"  @ref="_picker" @bind-DateRange="@RozsahDat" MinDate="MinMaxDate.Min" MaxDate="MinMaxDate.Max">
                            <PickerActions>
                                <MudButton Class="mr-auto align-self-start" OnClick="@(() => _picker.Clear())">Vymazat</MudButton>
                                <MudButton OnClick="@(() => _picker.Close(false))">Zrušit</MudButton>
                                <MudButton Color="MudBlazor.Color.Primary" OnClick="@(() => _picker.Close())">Potvrdit</MudButton>
                            </PickerActions>
                        </MudDateRangePicker>
                        
                    </div>
                </RadzenColumn>
            </RadzenRow>
        </ChildContent>
    </RadzenCard>
    <br />
    <RadzenCard Style="width: 100%;" class=@hidden2>
        <ChildContent>
            <RadzenText TextAlign="TextAlign.Left" TextStyle="TextStyle.H5">Vnitřní senzory WeatherLink Live:</RadzenText>
            <RadzenRow>
                <RadzenColumn SizeXS="12" SizeSM="12" SizeMD="6" SizeLG="6" SizeXL="6">
                    <RadzenCard>
                        <figure class="highcharts-figure">
                            <div id="chart1"></div>
                        </figure>
                    </RadzenCard>
                </RadzenColumn>
                <RadzenColumn SizeXS="12" SizeSM="12" SizeMD="6" SizeLG="6" SizeXL="6">
                    <RadzenCard>
                        <figure class="highcharts-figure">
                            <div id=chart2></div>
                        </figure>
                    </RadzenCard>
                </RadzenColumn>
            </RadzenRow>
        </ChildContent>
    </RadzenCard>
    <br />
    <RadzenCard Style="width: 100%; " class=@hidden>
        <ChildContent>
            <RadzenText TextAlign="TextAlign.Left" TextStyle="TextStyle.H5">Vnitřní senzory AirLink:</RadzenText>
            <RadzenRow>
                <RadzenColumn SizeXS="12" SizeSM="12" SizeMD="6" SizeLG="6" SizeXL="6">
                    <RadzenCard>
                        <figure class="highcharts-figure">
                            <div id="chart3"></div>
                        </figure>
                    </RadzenCard>
                </RadzenColumn>
                <RadzenColumn SizeXS="12" SizeSM="12" SizeMD="6" SizeLG="6" SizeXL="6">
                    <RadzenCard>
                        <figure class="highcharts-figure">
                            <div id="chart4"></div>
                        </figure>
                    </RadzenCard>
                </RadzenColumn>
            </RadzenRow>
            <br />
            <div class=@hidden3>
            <RadzenRow>
                <RadzenColumn SizeXS="12" SizeSM="12" SizeMD="6" SizeLG="6" SizeXL="6">
                    <RadzenCard>
                        <figure class="highcharts-figure">
                            <div id="chart5"></div>
                        </figure>
                    </RadzenCard>
                </RadzenColumn>
                <RadzenColumn SizeXS="12" SizeSM="12" SizeMD="6" SizeLG="6" SizeXL="6">
                    <RadzenCard>
                        <figure class="highcharts-figure">
                            <div id=chart6></div>
                        </figure>
                    </RadzenCard>
                </RadzenColumn>
            </RadzenRow>
            </div>
        </ChildContent>
    </RadzenCard>

     
</RadzenContentContainer>


@code {
    public List<Quantities> last_data_awg;
    public List<Quantities> last_data;
    string hidden;
    string hidden2;
    string hidden3;

    private DateRange? rozsahdat;
    public DateRange? RozsahDat { get { return rozsahdat; } set { rozsahdat = value; LoadData(); } }

    public DateRange? tyden = new DateRange(DateTime.Now.AddDays(-7).Date, DateTime.Now);

    public (DateTime? Min, DateTime? Max) MinMaxDate;

    Timer timer;

    private int velicina;
    public int Velicina { get { return velicina; } set { velicina = value; LoadData(); } }

    // Spouští JS funkci, která renderuje graf
    public async Task RenderCharts(List<Quantities> quantities, List<Quantities> quantitiesawg, int value)
    {
        if (value == 1)
        {
            var chart1 = GraphGenerator.BasicGraphVnitrniTeplotaWLL(quantities);
            var chart2 = GraphGeneratorAwg.BasicGraphVnitrniTeplotaWLLAwg(quantitiesawg);
            var chart3 = GraphGenerator.BasicGraphVnitrniTeplotaAirLink(quantities);
            var chart4 = GraphGeneratorAwg.BasicGraphVnitrniTeplotaAirLinkAwg(quantitiesawg);
            await JS.InvokeAsync<string>("RenderCharts", chart1, "chart1");
            await JS.InvokeAsync<string>("RenderChartsNew", chart2, "chart2");
            await JS.InvokeAsync<string>("RenderCharts", chart3, "chart3");
            await JS.InvokeAsync<string>("RenderChartsNew", chart4, "chart4");
            await JS.InvokeAsync<string>("DeleteGraf", "chart5");
            await JS.InvokeAsync<string>("DeleteGraf", "chart6");

        }
        else if (value == 2)
        {
            var chart5 = GraphGenerator.BasicGraphVnitrniTlakWLL(quantities);
            var chart6 = GraphGeneratorAwg.BasicGraphVnitrniTlakWLLAwg(quantitiesawg);
            await JS.InvokeAsync<string>("RenderCharts", chart5, "chart1");
            await JS.InvokeAsync<string>("RenderChartsNew", chart6, "chart2");
            await JS.InvokeAsync<string>("DeleteGraf", "chart3");
            await JS.InvokeAsync<string>("DeleteGraf", "chart4");
            await JS.InvokeAsync<string>("DeleteGraf", "chart5");
            await JS.InvokeAsync<string>("DeleteGraf", "chart6");

        }
        else if (value == 3)
        {
            var chart7 = GraphGenerator.BasicGraphVnitrniVlhkostWLL(quantities);
            var chart8 = GraphGeneratorAwg.BasicGraphVnitrniVlhkostWLLAwg(quantitiesawg);
            var chart9 = GraphGenerator.BasicGraphVnitrniVlhkostAirLink(quantities);
            var chart10 = GraphGeneratorAwg.BasicGraphVnitrniVlhkostAirLinkAwg(quantitiesawg);
            await JS.InvokeAsync<string>("RenderCharts", chart7, "chart1");
            await JS.InvokeAsync<string>("RenderChartsNew", chart8, "chart2");
            await JS.InvokeAsync<string>("RenderCharts", chart9, "chart3");
            await JS.InvokeAsync<string>("RenderChartsNew", chart10, "chart4");
            await JS.InvokeAsync<string>("DeleteGraf", "chart5");
            await JS.InvokeAsync<string>("DeleteGraf", "chart6");

        }
        else if (value == 4)
        {
            var chart11 = GraphGenerator.BasicGraphVnitrniOvzdusiAirLink(quantities);
            var chart13 = GraphGeneratorAwg.BasicGraphVnitrniOvzdusiAirLinkAwg(quantitiesawg);
            var chart12 = GraphGenerator.BasicGraphVnitrniAQIAirLink(quantities);
            var chart14 = GraphGeneratorAwg.BasicGraphVnitrniAQIAirLinkAwg(quantitiesawg);
            await JS.InvokeAsync<string>("DeleteGraf", "chart1");
            await JS.InvokeAsync<string>("DeleteGraf", "chart2");
            await JS.InvokeAsync<string>("RenderCharts", chart11, "chart3");
            await JS.InvokeAsync<string>("RenderChartsNew", chart13, "chart4");
            await JS.InvokeAsync<string>("RenderCharts", chart12, "chart5");
            await JS.InvokeAsync<string>("RenderChartsNew", chart14, "chart6");


        }
    }

    // Změní prostředí
    public void ChangeTable(int value)
    {

        if (value == 1)
        {
            hidden = "nic";
            hidden2 = "nic";
            hidden3 = "hidden";

        }
        else if (value == 2)
        {
            hidden = "hidden";
            hidden2 = "nic";
            hidden3 = "hidden";
        }
        else if (value == 3)
        {
            hidden = "nic";
            hidden2 = "nic";
            hidden3 = "hidden";
        }
        else if (value == 4)
        {
            hidden = "nic";
            hidden2 = "hidden";
            hidden3 = "nic";
        }
    }


    // Načítání dat
    protected override async Task OnInitializedAsync()
    {
        // Minimální a maximílní datum pro volení rozsahu
        MinMaxDate = await dataDB.GetMinMaxDate();

        await LoadData();
    }

    public async Task LoadData()
    {
        if (rozsahdat == null) { rozsahdat = tyden; StateHasChanged(); }
        DateTime start = rozsahdat.Start.Value;
        DateTime end = rozsahdat.End.Value.AddDays(1);

        if (velicina == 0) { velicina = 1; StateHasChanged(); }

        // Záznami v rozsahu
        last_data_awg = await dataDB.GetSensorsDataAwg(start, end);
        last_data = await dataDB.GetSensorsData(start, end);

        ChangeTable(velicina);
        StateHasChanged();
        await RenderCharts(last_data, last_data_awg, velicina);

    }
    private MudDateRangePicker _picker;

}
